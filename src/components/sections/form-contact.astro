---
import { z } from 'zod';
import Paragraph from '../typography/paragraph.astro';

const formSchema = z.object({
  name: z.string().min(2, { message: 'O nome deve ter pelo menos 2 caracteres.' }),
  email: z.string().email({ message: 'Por favor, insira um email válido.' }),
  phone: z
    .string()
    .min(8, { message: 'O telefone deve ter pelo menos 8 caracteres.' }),
  projectType: z.enum(
    [
      'predio-residencial',
      'edificio-comercial',
      'interiores',
      'viabilidade',
      'fachada',
      'residencia',
      'reforma',
      'paisagismo',
      '',
    ],
    {
      message: 'Por favor, selecione um tipo de projeto.',
    }
  ),
  message: z
    .string()
    .min(10, { message: 'A mensagem deve ter pelo menos 10 caracteres.' }),
});

type FormData = z.infer<typeof formSchema>;
let errors: Partial<Record<keyof FormData, string>> = {};
let formData: FormData = {
  name: '',
  email: '',
  phone: '',
  projectType: '',
  message: '',
};
let formStatus = { success: false, message: '', visible: false };

if (Astro.request.method === 'POST') {
  try {
    const data = await Astro.request.formData();
    const formValues = {
      name: data.get('name')?.toString() || '',
      email: data.get('email')?.toString() || '',
      phone: data.get('phone')?.toString() || '',
      message: data.get('message')?.toString() || '',
      projectType: data.get('projectType')?.toString() || '',
    };

    const result = formSchema.safeParse(formValues);

    if (result.success) {
      formData = result.data;
      console.log('Dados do formulário enviados com sucesso:', formData);

      formStatus = {
        success: true,
        message: 'Obrigado pelo seu contato. Responderemos em breve.',
        visible: true,
      };

      formData = {
        name: '',
        email: '',
        phone: '',
        projectType: '' as const,
        message: '',
      };
    } else {
      formData = formValues as FormData;
      errors = {};

      result.error.issues.forEach((issue) => {
        if (issue.path[0]) {
          errors[issue.path[0] as keyof FormData] = issue.message;
        }
      });

      formStatus = {
        success: false,
        message: 'Por favor, corrija os erros abaixo.',
        visible: true,
      };
    }
  } catch (error) {
    console.error('Erro ao processar formulário:', error);
    formStatus = {
      success: false,
      message:
        'Houve um problema ao enviar o formulário. Por favor, tente novamente mais tarde.',
      visible: true,
    };
  }
}
---

<div class="w-full max-w-2xl rounded">
  {
    formStatus.visible && (
      <div
        class={`mb-6 rounded-md border p-4 ${formStatus.success ? 'border-green-200 bg-green-50 text-green-800' : 'border-red-200 bg-red-50 text-red-800'}`}
      >
        <Paragraph>{formStatus.message}</Paragraph>
      </div>
    )
  }

  <form method="POST" enctype="application/x-www-form-urlencoded" class="space-y-6">
    <div>
      <label for="name" class="mb-1 block text-sm font-medium text-gray-700"
        >Nome</label
      >
      <input
        type="text"
        id="name"
        name="name"
        placeholder="Seu nome completo"
        value={formData.name}
        required
        class="w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-zinc-500 focus:ring-2 focus:ring-zinc-500 focus:outline-none"
      />
      {
        errors.name && (
          <Paragraph class="mt-1 text-sm text-red-600">{errors.name}</Paragraph>
        )
      }
    </div>

    <div>
      <label for="email" class="mb-1 block text-sm font-medium text-gray-700"
        >Email</label
      >
      <input
        type="email"
        id="email"
        name="email"
        placeholder="seu.email@exemplo.com"
        value={formData.email}
        required
        class="w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-zinc-500 focus:ring-2 focus:ring-zinc-500 focus:outline-none"
      />
      {
        errors.email && (
          <Paragraph class="mt-1 text-sm text-red-600">{errors.email}</Paragraph>
        )
      }
    </div>

    <div>
      <label for="phone" class="mb-1 block text-sm font-medium text-gray-700"
        >Telefone</label
      >
      <input
        type="tel"
        id="phone"
        name="phone"
        placeholder="(00) 00000-0000"
        value={formData.phone}
        required
        class="w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-zinc-500 focus:ring-2 focus:ring-zinc-500 focus:outline-none"
      />
      {
        errors.phone && (
          <Paragraph class="mt-1 text-sm text-red-600">{errors.phone}</Paragraph>
        )
      }
    </div>

    <div>
      <label for="projectType" class="mb-1 block text-sm font-medium text-gray-700"
        >Tipo de projeto</label
      >
      <select
        id="projectType"
        name="projectType"
        required
        class="w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm invalid:text-[#9e9eae] focus:border-zinc-500 focus:ring-2 focus:ring-zinc-500 focus:outline-none"
      >
        <option value="" disabled selected hidden>Selecione</option>
        <option
          value="predio-residencial"
          class="text-gray-500"
          selected={formData.projectType === 'predio-residencial'}
          >Prédio Residencial</option
        >
        <option
          value="edificio-comercial"
          class="text-gray-500"
          selected={formData.projectType === 'edificio-comercial'}
          >Edifício Comercial</option
        >
        <option
          value="interiores"
          class="text-gray-500"
          selected={formData.projectType === 'interiores'}
          >Projeto de interiores</option
        >
        <option
          value="viabilidade"
          class="text-gray-500"
          selected={formData.projectType === 'viabilidade'}
          >Estudo de viabilidade</option
        >
        <option
          value="fachada"
          class="text-gray-500"
          selected={formData.projectType === 'fachada'}>Estudo de fachada</option
        >
        <option
          value="residencia"
          class="text-gray-500"
          selected={formData.projectType === 'residencia'}
          >Residência unifamiliar</option
        >
        <option
          value="reforma"
          class="text-gray-500"
          selected={formData.projectType === 'reforma'}>Projeto de reforma</option
        >
        <option
          value="paisagismo"
          class="text-gray-500"
          selected={formData.projectType === 'paisagismo'}
          >Projeto de paisagismo</option
        >
      </select>
      {
        errors.projectType && (
          <Paragraph class="mt-1 text-sm text-red-600">
            {errors.projectType}
          </Paragraph>
        )
      }
    </div>

    <div>
      <label for="message" class="mb-1 block text-sm font-medium text-gray-700"
        >Mensagem</label
      >
      <textarea
        id="message"
        name="message"
        placeholder="Digite sua mensagem aqui"
        required
        class="min-h-32 w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-zinc-500 focus:ring-2 focus:ring-zinc-500 focus:outline-none"
        >{formData.message}</textarea
      >
      {
        errors.message && (
          <Paragraph class="mt-1 text-sm text-red-600">{errors.message}</Paragraph>
        )
      }
    </div>

    <button
      type="submit"
      class="hover:opacit-50 w-fit rounded-md bg-zinc-800 px-4 py-1 font-medium text-white transition duration-200 focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 focus:outline-none"
    >
      Enviar
    </button>
  </form>
</div>
