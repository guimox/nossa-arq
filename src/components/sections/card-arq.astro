---
import type { ImageMetadata } from 'astro';
import { getImage, Image } from 'astro:assets';
import Paragraph from '../typography/paragraph.astro';
import Subtitle from '../typography/subtitle.astro';
import { join } from 'path';
import { getPlaiceholder } from 'plaiceholder';
import { readFile } from 'fs/promises';
import { cx } from 'class-variance-authority';

interface CardArqProps {
  id: string
    supertitle:string;
    title: string;
    subtitle: string;
    images: string[],
    link: string;
    ano: string;
    tamanho: string,
    tipo: string,
    projeto: string;
    tags: string[],
}
  

const { item } = Astro.props;

const allImages = import.meta.glob<{ default: ImageMetadata }>(
  '/src/assets/*/**.{jpg,jpeg,png,gif,webp,svg}'
);

const firstImage = item.images[0]
const imagePathKey = `/src/assets/${item.id}/${firstImage}`;

if (!allImages[imagePathKey]) {
  throw new Error(
    `Image "${firstImage}" not found in src/assets/. Full path check: ${imagePathKey}`
  );
}

const imageModule = await allImages[imagePathKey]();
const importedImageSrc = imageModule.default;

const optimizedImage = await getImage({
  src: importedImageSrc,
  widths: [800, 1200, 1600],
});

const getLocalImageWithPlaiceholder = async (relativePath: string) => {
  const absolutePath = join(process.cwd(), 'src/assets', relativePath);
  const buffer = await readFile(absolutePath);

  const {
    metadata: { height, width },
    ...plaiceholder
  } = await getPlaiceholder(buffer, { size: 10 });

  return {
    ...plaiceholder,
    img: { src: optimizedImage.src, height, width },
  };
};

const { css, img } = await getLocalImageWithPlaiceholder(`${item.id}/${firstImage}`);
---

<div
  id="card"
  class="relative flex h-full flex-col overflow-hidden bg-white hover:cursor-pointer transition-transform duration-300 ease-out hover:-translate-y-1 group"
>
  <a href={'/portfolio/' + item.link}>
    <div class="relative aspect-[4/2] w-full overflow-hidden">
      <div
        style={css}
        class="absolute inset-0 w-full h-full transform scale-125 filter blur-xl brightness-100 z-1 opacity-40 group-hover:opacity-0 transition-opacity duration-300"
      />
      <div class="relative z-10 h-full w-full">
        <Image
          src={img.src}
          width={optimizedImage.attributes.width}
          height={optimizedImage.attributes.height}
          alt={item.title}
          class="h-full w-full object-cover transition-all duration-700 ease-in-out group-hover:scale-105 group-hover:brightness-85"
          loading="lazy"
          decoding="async"
        />
      </div>
    </div>
    <div class="flex flex-col gap-2 py-5">
      <Subtitle
        class="font-bold transition-colors duration-300 group-hover:text-zinc-700"
        >{item.supertitle}{" "}{item.title}</Subtitle
      >
      <Paragraph class="text-zinc-500">{item.subtitle}</Paragraph>
      {
        item.tags.length > 0 && (
          <div class="tag-container mt-2 flex flex-wrap gap-2">
            {item.tags.map((tag:string, index:number) => (
              <span 
                class="inline-flex items-center rounded bg-zinc-100 px-3 py-1 text-xs text-zinc-600 opacity-0 translate-y-2"
                style={`animation: fadeIn 0.3s ease-out forwards ${0.05 * (index + 1)}s`}
              >
                {tag}
              </span>
            ))}
          </div>
        )
      }
    </div>
  </a>
</div>

<style>
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script>
  const observeTagChanges = () => {
    const tagContainers = document.querySelectorAll('.tag-container');

    tagContainers.forEach((container) => {
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
            mutation.addedNodes.forEach((node, index) => {
              if (node.nodeType === 1) {
                const element = node as HTMLElement;
                element.classList.add('opacity-0', 'translate-y-2');
                void element.offsetWidth;
                element.style.animation = `fadeIn 0.3s ease-out forwards ${0.05 * (index + 1)}s`;
              }
            });
          }
        });
      });

      observer.observe(container, {
        childList: true,
        subtree: true,
      });
    });
  };

  document.addEventListener('DOMContentLoaded', observeTagChanges);
  document.addEventListener('astro:page-load', observeTagChanges);
</script>