---
import { Image, getImage } from 'astro:assets';
import { itemsArq } from '../../constants/items';
import Layout from '../../layout/layout.astro';
import Title from '../../components/typography/title.astro';
import Paragraph from '../../components/typography/paragraph.astro';
import Subtitle from '../../components/typography/subtitle.astro';
import { cx } from 'class-variance-authority';
import { join } from 'path';
import { getPlaiceholder } from 'plaiceholder';
import { readFile } from 'fs/promises';

export function getStaticPaths() {
  return itemsArq.map((item) => ({
    params: { slug: item.link },
    props: { project: item },
  }));
}

const { slug } = Astro.params;

const project = itemsArq.find((p) => p.link === slug);

if (!project) {
  throw new Error(`Projeto com slug "${slug}" não encontrado.`);
}

const allImages = import.meta.glob<{ default: ImageMetadata }>(
  '/src/assets/*/**.{jpg,jpeg,png,gif,webp,svg}'
);

const optimizedImages = await Promise.all(
  project.images.map(async (imageName) => {
    const imagePathKey = `/src/assets/${project.id}/${imageName}`;

    if (!allImages[imagePathKey]) {
      throw new Error(
        `Image "${imageName}" not found in src/assets/. Full path check: ${imagePathKey}`
      );
    }

    const imageModule = await allImages[imagePathKey]();
    const importedImageSrc = imageModule.default;

    const optimizedImage = await getImage({
      src: importedImageSrc,
      widths: [800, 1200, 1600],
      formats: ['webp', 'avif', 'jpeg'],
      quality: 80,
    });

    return {
      src: optimizedImage.src,
      attributes: optimizedImage.attributes,
      imageName: imageName,
    };
  })
);

const mainImage = optimizedImages[0];

const getLocalImageWithPlaiceholder = async (relativePath: string) => {
  const absolutePath = join(process.cwd(), 'src/assets', relativePath);
  const buffer = await readFile(absolutePath);

  const {
    metadata: { height, width },
    ...plaiceholder
  } = await getPlaiceholder(buffer, { size: 10 });

  return {
    ...plaiceholder,
    img: {
      src: optimizedImages[0],
      height,
      width,
    },
  };
};

const { css, img } = await getLocalImageWithPlaiceholder(
  project.id + '/' + project.images[0]
);
---

<Layout link="portfolio">
  <section
    class="content-grid mx-auto w-full space-y-30 bg-white py-12 lg:mt-20 lg:space-y-50"
  >
    <div class="mx-auto my-15 flex w-full flex-col justify-between md:flex-row">
      <div class="w-full">
        <Title>
          {project.supertitle}
          {' '}
          {project.title}
        </Title>
        <p class="mt-6 text-lg text-gray-700">{project.subtitle}</p>
      </div>
      <div
        class="my-10 flex flex-col justify-center gap-2 border-l bg-white p-4 md:w-2/3 md:p-6"
      >
        <Paragraph><span class="font-bold">Tipo:</span> {project.tipo}</Paragraph>
        <Paragraph
          ><span class="font-bold">Tamanho:</span> {project.tamanho}</Paragraph
        >
        <Paragraph><span class="font-bold">Ano:</span> {project.ano}</Paragraph>
      </div>
    </div>
    <div class="h-fit w-full">
      <div class="relative h-64 w-full overflow-hidden">
        <div
          style={css}
          class={cx(
            'absolute',
            'inset-0',
            'w-full',
            'h-64',
            'transform',
            'brightness-50',
            'scale-150',
            'filter',
            'blur-2xl',
            'z-[-1]'
          )}
        >
        </div>
        <Image
          src={mainImage.src}
          width={mainImage.attributes.width}
          height={mainImage.attributes.height / 2}
          alt={project.title}
          class="h-64 w-full rounded-sm object-cover"
        />
      </div>
    </div>
    <div class="space-y-10">
      <div class="flex flex-col gap-20 lg:flex-row">
        <div class="flex w-fit flex-col space-y-4">
          <Subtitle>O Projeto</Subtitle>
          <Paragraph>
            {project.projeto}
          </Paragraph>
        </div>

        <div class="w-full">
          <div
            class="relative aspect-[16/9] w-full overflow-hidden"
            data-slideshow-container
          >
            <div id="slideImages" class="relative h-full w-full">
              {
                optimizedImages.map((image, index) => (
                  <div
                    class={`absolute inset-0 transition-opacity duration-700 ease-in-out ${
                      index === 0 ? 'opacity-100' : 'opacity-0'
                    }`}
                    data-index={index}
                  >
                    <Image
                      src={image.src}
                      width={image.attributes.width}
                      height={image.attributes.height}
                      alt={`Imagem ${index + 1} do projeto ${project.title}`}
                      class="h-full w-full object-cover"
                    />
                  </div>
                ))
              }
            </div>
            <button
              id="prevButton"
              class="absolute top-1/2 left-4 z-20 flex h-10 w-10 -translate-y-1/2 items-center justify-center rounded-full bg-white/70 font-bold text-gray-800 transition-all duration-300 hover:scale-110 hover:bg-white/90 focus:outline-none"
              aria-label="Imagem anterior"
            >
              <span class="sr-only">Anterior</span>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-6 w-6"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M15 19l-7-7 7-7"></path>
              </svg>
            </button>

            <button
              id="nextButton"
              class="absolute top-1/2 right-4 z-20 flex h-10 w-10 -translate-y-1/2 items-center justify-center rounded-full bg-white/70 font-bold text-gray-800 transition-all duration-300 hover:scale-110 hover:bg-white/90 focus:outline-none"
              aria-label="Próxima imagem"
            >
              <span class="sr-only">Próxima</span>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-6 w-6"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9 5l7 7-7 7"></path>
              </svg>
            </button>

            <div
              class="absolute right-0 bottom-0 left-0 z-20 mx-auto flex w-full justify-end px-4 py-3"
            >
              <div class="flex gap-2" id="slideButtons">
                {
                  optimizedImages.map((_, index) => (
                    <button
                      class={`h-3 w-3 cursor-pointer rounded-full bg-white transition-all duration-300 ${index === 0 ? 'scale-110 opacity-100' : 'opacity-50 hover:opacity-75'}`}
                      data-index={index}
                      aria-label={`Ver imagem ${index + 1}`}
                    />
                  ))
                }
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const slideImages = document.querySelectorAll('#slideImages [data-index]');
        const slideButtons = document.querySelectorAll('#slideButtons [data-index]');
        const slideshowContainer = document.querySelector(
          '[data-slideshow-container]'
        );
        const prevButton = document.getElementById('prevButton');
        const nextButton = document.getElementById('nextButton');

        if (
          !slideImages.length ||
          !slideButtons.length ||
          !slideshowContainer ||
          !prevButton ||
          !nextButton
        ) {
          console.error('Slideshow elements not found!');
          return;
        }

        const totalSlides = slideImages.length;
        let currentSlide = 0;
        let slideInterval: ReturnType<typeof setInterval>;

        const showSlide = (index: number) => {
          const newIndex = Math.max(0, Math.min(index, totalSlides - 1));

          if (newIndex === currentSlide && slideInterval) return;

          slideImages.forEach((img, i) => {
            const imgEl = img as HTMLElement;
            if (i === newIndex) {
              imgEl.classList.remove('opacity-0');
              imgEl.classList.add('opacity-100');
            } else {
              imgEl.classList.remove('opacity-100');
              imgEl.classList.add('opacity-0');
            }
          });

          slideButtons.forEach((button, i) => {
            const btnEl = button as HTMLElement;
            if (i === newIndex) {
              btnEl.classList.remove('opacity-50', 'hover:opacity-75');
              btnEl.classList.add('opacity-100', 'scale-110');
              btnEl.setAttribute('aria-current', 'true');
            } else {
              btnEl.classList.remove('opacity-100', 'scale-110');
              btnEl.classList.add('opacity-50', 'hover:opacity-75');
              btnEl.removeAttribute('aria-current');
            }
          });

          currentSlide = newIndex;
        };

        const nextSlide = () => {
          const next = (currentSlide + 1) % totalSlides;
          showSlide(next);
        };

        const prevSlide = () => {
          const prev = (currentSlide - 1 + totalSlides) % totalSlides;
          showSlide(prev);
        };

        slideButtons.forEach((button) => {
          button.addEventListener('click', () => {
            const indexAttr = button.getAttribute('data-index');
            if (indexAttr === null) return;
            const index = parseInt(indexAttr, 10);
            if (isNaN(index)) return;

            showSlide(index);

            if (slideInterval) {
              clearInterval(slideInterval);
              startAutoSlide();
            }
          });
        });

        nextButton.addEventListener('click', () => {
          nextSlide();
          resetAutoSlide();
        });

        prevButton.addEventListener('click', () => {
          prevSlide();
          resetAutoSlide();
        });

        const startAutoSlide = () => {
          if (slideInterval) {
            clearInterval(slideInterval);
          }
          slideInterval = setInterval(nextSlide, 5000);
        };

        const stopAutoSlide = () => {
          if (slideInterval) {
            clearInterval(slideInterval);
          }
        };

        const resetAutoSlide = () => {
          stopAutoSlide();
          startAutoSlide();
        };

        slideshowContainer.addEventListener('mouseenter', stopAutoSlide);
        slideshowContainer.addEventListener('mouseleave', startAutoSlide);

        document.addEventListener('keydown', (e) => {
          if (e.key === 'ArrowLeft') {
            prevSlide();
            resetAutoSlide();
          } else if (e.key === 'ArrowRight') {
            nextSlide();
            resetAutoSlide();
          }
        });

        document.addEventListener('visibilitychange', () => {
          if (document.hidden) {
            stopAutoSlide();
          } else {
            startAutoSlide();
          }
        });

        showSlide(0);
        startAutoSlide();
      });
    </script>
  </section>
</Layout>
