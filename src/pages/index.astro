---
import { Image } from 'astro:assets';
import { cx } from 'class-variance-authority';
import { readFile } from 'fs/promises';
import { join } from 'path';
import { getPlaiceholder } from 'plaiceholder';
import Paragraph from '../components/typography/paragraph.astro';
import { itemsArq } from '../constants/items';
import Layout from '../layout/layout.astro';

const allImages = import.meta.glob<{ default: ImageMetadata }>(
  '/src/assets/*/**.{jpg,jpeg,png,gif,webp,svg}'
);

const slides = await Promise.all(
  itemsArq.map(async (item) => {
    const imagePathKey = `/src/assets/${item.id}/${item.images[0]}`;

    if (!allImages[imagePathKey]) {
      throw new Error(
        `Image "${item.images}" not found in src/assets/. Full path check: ${imagePathKey}`
      );
    }

    const imageModule = await allImages[imagePathKey]();
    const importedImage = imageModule.default;

    return {
      titles: [item.supertitle, item.title],
      link: item.link,
      image: item.images[0],
      importedImage,
    };
  })
);

const getLocalImageWithPlaiceholder = async (relativePath: string) => {
  const absolutePath = join(process.cwd(), 'src/assets', relativePath);
  const buffer = await readFile(absolutePath);

  const {
    metadata: { height, width },
    ...plaiceholder
  } = await getPlaiceholder(buffer, { size: 10 });

  return {
    ...plaiceholder,
    img: {
      src: slides[0].importedImage,
      height,
      width,
    },
  };
};

const { css, img } = await getLocalImageWithPlaiceholder(
  '1/' + itemsArq[0].images[0]
);
---

<Layout link="home">
  <section class="relative overflow-hidden" data-slideshow-container>
    <div
      style={css}
      class={cx(
        'absolute',
        'inset-0',
        'w-full',
        'h-full',
        'transform',
        'brightness-50',
        'scale-150',
        'filter',
        'blur-2xl',
        'z-[-1]'
      )}
    >
    </div>
    <div id="slideImages" class="relative h-screen">
      {
        slides.map((slide, index) => (
          <div
            class={`absolute inset-0 transition-opacity duration-700 ease-in-out ${
              index === 0 ? 'opacity-100' : 'opacity-0'
            }`}
            data-index={index}
          >
            {index === 0 ? (
              <Image
                src={img.src}
                alt={slide.titles.join(' ')}
                title={slide.titles[0]}
                class="h-screen w-full object-cover brightness-40"
              />
            ) : (
              <Image
                src={slide.importedImage}
                alt={slide.titles.join(' ')}
                title={slide.titles[0]}
                class="h-screen w-full object-cover brightness-40"
              />
            )}
          </div>
        ))
      }
    </div>

    <div
      class="absolute inset-0 z-10 mx-auto flex h-3/4 max-w-[1700px] flex-col items-start justify-center gap-4 px-2 py-2 md:gap-4 md:px-6 lg:h-full"
      id="slideTitles"
    >
      {
        slides.map((slide, index) => (
          <div
            class={`flex flex-col space-y-5 transition-opacity duration-700 ease-in-out ${index === 0 ? 'relative opacity-100' : 'invisible absolute opacity-0'}`}
            data-index={index}
          >
            <div class="space-y-2 tracking-wide">
              {slide.titles.map((title) => (
                <h2 class="text-6xl font-bold text-white lg:text-8xl">{title}</h2>
              ))}
            </div>
            <a
              href={'/projetos/' + slide.link}
              class="mt-5 inline-block text-white underline underline-offset-8 transition-opacity hover:opacity-75 md:mt-0"
            >
              Ver projeto
            </a>
          </div>
        ))
      }
    </div>
    <div
      class="absolute right-0 bottom-20 left-0 z-20 mx-auto flex w-full max-w-[1700px] flex-col-reverse items-start justify-between gap-10 py-8 font-medium text-white md:bottom-0 md:flex-row md:items-center"
    >
      <Paragraph class="max-w-2xl px-2 md:px-6">
        Autoral, brasileira e contemporânea — projetos que traduzem identidade,
        pertencimento e beleza em cada detalhe.
      </Paragraph>
      <div class="flex gap-2 sm:gap-3 md:gap-4" id="slideButtons">
        {
          slides.map((slide, index) => (
            <button
              class={`h-3 w-3 cursor-pointer rounded-sm bg-white transition-all duration-300 md:h-4 md:w-4 ${index === 0 ? 'scale-110 opacity-100' : 'opacity-50 hover:opacity-75'}`}
              data-index={index}
              aria-label={`Ver slide ${index + 1}: ${slide.titles.join(' ')}`}
            />
          ))
        }
      </div>
    </div>
  </section>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const slideImages = document.querySelectorAll('#slideImages [data-index]');
    const slideTitles = document.querySelectorAll('#slideTitles [data-index]');
    const slideButtons = document.querySelectorAll('#slideButtons [data-index]');
    const slideshowContainer = document.querySelector('[data-slideshow-container]');

    if (
      !slideImages.length ||
      !slideTitles.length ||
      !slideButtons.length ||
      !slideshowContainer
    ) {
      console.error('Slideshow elements not found!');
      return;
    }

    const totalSlides = slideImages.length;
    let currentSlide = 0;
    let slideInterval: ReturnType<typeof setInterval>;

    const showSlide = (index: number) => {
      const newIndex = Math.max(0, Math.min(index, totalSlides - 1));

      if (newIndex === currentSlide && slideInterval) return;

      slideImages.forEach((img, i) => {
        const imgEl = img as HTMLElement;
        if (i === newIndex) {
          imgEl.classList.remove('opacity-0');
          imgEl.classList.add('opacity-100');
        } else {
          imgEl.classList.remove('opacity-100');
          imgEl.classList.add('opacity-0');
        }
      });

      slideTitles.forEach((titleDiv, i) => {
        const titleEl = titleDiv as HTMLElement;
        if (i === newIndex) {
          titleEl.classList.remove('opacity-0', 'absolute', 'invisible');
          titleEl.classList.add('opacity-100', 'relative');
        } else {
          titleEl.classList.remove('opacity-100', 'relative');
          titleEl.classList.add('opacity-0', 'absolute', 'invisible');
        }
      });

      slideButtons.forEach((button, i) => {
        const btnEl = button as HTMLElement;
        if (i === newIndex) {
          btnEl.classList.remove('opacity-50', 'hover:opacity-75');
          btnEl.classList.add('opacity-100', 'scale-110');
          btnEl.setAttribute('aria-current', 'true');
        } else {
          btnEl.classList.remove('opacity-100', 'scale-110');
          btnEl.classList.add('opacity-50', 'hover:opacity-75');
          btnEl.removeAttribute('aria-current');
        }
      });

      currentSlide = newIndex;
    };

    const nextSlide = () => {
      const next = (currentSlide + 1) % totalSlides;
      showSlide(next);
    };

    slideButtons.forEach((button) => {
      button.addEventListener('click', () => {
        const indexAttr = button.getAttribute('data-index');
        if (indexAttr === null) return;
        const index = parseInt(indexAttr, 10);
        if (isNaN(index)) return;

        showSlide(index);

        if (slideInterval) {
          clearInterval(slideInterval);
          startAutoSlide();
        }
      });
    });

    const startAutoSlide = () => {
      if (slideInterval) {
        clearInterval(slideInterval);
      }
      slideInterval = setInterval(nextSlide, 15000); // 15 seconds
    };

    const stopAutoSlide = () => {
      if (slideInterval) {
        clearInterval(slideInterval);
      }
    };

    slideshowContainer.addEventListener('mouseenter', stopAutoSlide);
    slideshowContainer.addEventListener('mouseleave', startAutoSlide);

    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        stopAutoSlide();
      } else {
        startAutoSlide();
      }
    });

    showSlide(0);
    startAutoSlide();
  });
</script>
