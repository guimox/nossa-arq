---
const isHomePage = Astro.url.pathname === '/';

const headerTextColor = isHomePage ? 'text-white' : 'text-zinc-700';
const barColor = isHomePage ? 'bg-white' : 'bg-zinc-700';
const mobileMenuBg = isHomePage ? 'bg-zinc-800/95' : 'bg-white';
const mobileMenuTextColor = isHomePage ? 'text-white' : 'text-zinc-700';
---

<header
  class:list={[
    'content-grid absolute bg-transparent top-0 z-30 mx-auto w-full border-b',
    headerTextColor,
  ]}
  id="main-header"
>
  <div
    class="flex h-20 max-w-[1700px] mx-auto w-full items-center justify-between text-lg"
  >
    <div class={`text-xl font-bold ${headerTextColor}`}>
      <a href="/" class={`font-bold ${headerTextColor}`}>Nossa Arquitetura</a>
    </div>
    <nav class="hidden md:flex items-center space-x-8 lg:space-x-10">
      <a
        href="/sobre"
        class={`font-medium text-base hover:opacity-70 transition-opacity ${headerTextColor}`}
        >Sobre</a
      >
      <a
        href="/projetos"
        class={`font-medium text-base hover:opacity-70 transition-opacity ${headerTextColor}`}
        >Projetos</a
      >
      <a
        href="/contato"
        class={`font-medium text-base hover:opacity-70 transition-opacity ${headerTextColor}`}
        >Contato</a
      >
    </nav>
    <button
      class="group relative z-50 flex h-8 w-8 cursor-pointer items-center justify-center rounded p-1 md:hidden"
      aria-label="Toggle navigation menu"
      aria-expanded="false"
      aria-controls="mobile-menu"
      id="nav-toggle"
    >
      <span class="sr-only">Open main menu</span>
      <div class="relative block h-full w-full">
        <span
          id="bar1"
          class:list={[
            'absolute left-1/2 top-[calc(50%-6px)] block h-0.5 w-5 -translate-x-1/2 transform rounded-full transition-all duration-300 ease-in-out',
            barColor,
            'group-[.is-active]:top-1/2 group-[.is-active]:-translate-y-1/2 group-[.is-active]:rotate-45', // Move to center and rotate
          ]}></span>
        <span
          id="bar2"
          class:list={[
            'absolute left-1/2 top-1/2 block h-[1.5px] w-5 -translate-x-1/2 -translate-y-1/2 transform rounded-full transition-opacity duration-300 ease-in-out',
            barColor,
            'group-[.is-active]:opacity-0',
          ]}></span>
        <span
          id="bar3"
          class:list={[
            'absolute left-1/2 top-[calc(50%+5px)] block h-0.5 w-5 -translate-x-1/2 transform rounded-full transition-all duration-300 ease-in-out',
            barColor,
            'group-[.is-active]:top-1/2 group-[.is-active]:-translate-y-1/2 group-[.is-active]:-rotate-45', // Move to center and rotate opposite
          ]}></span>
      </div>
    </button>
  </div>

  <div
    id="mobile-menu"
    class:list={[
      'absolute top-full left-0 z-40 w-full transform overflow-hidden md:hidden',
      'transition-all duration-300 ease-in-out',
      mobileMenuBg,
      'max-h-0 opacity-0 invisible',
    ]}
  >
    <div class="flex flex-col p-4 pt-2 pb-4">
      <a
        href="/sobre"
        class={`block font-medium text-lg py-3 ${mobileMenuTextColor} hover:opacity-70 transition-opacity`}
        >Sobre</a
      >
      <a
        href="/projetos"
        class={`block font-medium text-lg py-3 ${mobileMenuTextColor} hover:opacity-70 transition-opacity`}
        >Projetos</a
      >
      <a
        href="/contato"
        class={`block font-medium text-lg py-3 ${mobileMenuTextColor} hover:opacity-70 transition-opacity`}
        >Contato</a
      >
    </div>
  </div>
</header>

<script>
  // Ensure script runs after the DOM is fully loaded
  document.addEventListener('DOMContentLoaded', () => {
    const header = document.getElementById('main-header');
    const toggleButton = document.getElementById('nav-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    // No need to select individual bars if using group hover/focus states with classes

    if (!toggleButton || !mobileMenu || !header) {
      console.error('Header elements not found!');
      return; // Exit if elements aren't found
    }

    // Function to toggle menu state
    const toggleMenu = () => {
      const isActive = toggleButton.classList.contains('is-active');

      // Toggle button active state and ARIA attribute
      toggleButton.classList.toggle('is-active');
      toggleButton.setAttribute('aria-expanded', String(!isActive));

      // Toggle mobile menu visibility classes
      if (!isActive) {
        // Opening menu
        mobileMenu.classList.remove('max-h-0', 'opacity-0', 'invisible');
        mobileMenu.classList.add(
          'max-h-[calc(100vh-5rem)]',
          'opacity-100',
          'visible',
          'border-t',
          'border-zinc-300/20'
        ); // Add border when open
        // Optional: Add a background to header on home page only when menu is open
        if (header.classList.contains('text-white')) {
          // A proxy for isHomePage
          header.classList.add('bg-zinc-800/95'); // Match mobile menu bg
        }
      } else {
        // Closing menu
        mobileMenu.classList.add('max-h-0', 'opacity-0');
        // Delay hiding with visibility to allow transition to complete
        setTimeout(() => {
          // Ensure it's still closed before hiding completely
          if (!toggleButton.classList.contains('is-active')) {
            mobileMenu.classList.add('invisible');
            mobileMenu.classList.remove('border-t');
            // Optional: Remove header background on home page when menu closes
            if (header.classList.contains('text-white')) {
              header.classList.remove('bg-zinc-800/95');
            }
          }
        }, 300); // Match transition duration
        mobileMenu.classList.remove(
          'max-h-[calc(100vh-5rem)]',
          'opacity-100',
          'visible'
        );
      }
    };

    // Event listener for the toggle button
    toggleButton.addEventListener('click', (e) => {
      e.stopPropagation(); // Prevent potential conflicts if clicking inside header
      toggleMenu();
    });

    // Close menu when clicking on a mobile menu link
    const mobileLinks = mobileMenu.querySelectorAll('a');
    mobileLinks.forEach((link) => {
      link.addEventListener('click', () => {
        if (toggleButton.classList.contains('is-active')) {
          toggleMenu(); // Close the menu
        }
      });
    });

    // Optional: Close menu when clicking outside the header/menu
    document.addEventListener('click', (e) => {
      if (
        toggleButton.classList.contains('is-active') &&
        !header.contains(e.target as Node)
      ) {
        toggleMenu();
      }
    });

    // Optional: Close menu on ESC key press
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && toggleButton.classList.contains('is-active')) {
        toggleMenu();
      }
    });
  });
</script>
